# 베이스 이미지
FROM ubuntu:22.04

# 이미지 빌드 시 실행할 명령어 (패키지 설치)
RUN apt update && apt install -y openjdk-11-jdk wget git maven mysql-server nginx

# 이미지 빌드 시 실행할 명령어 (톰캣 9.0 설치)
RUN wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.109/bin/apache-tomcat-9.0.109.tar.gz -P /home/tomcat
RUN tar -xzvf /home/tomcat/apache-tomcat-9.0.109.tar.gz -C /home/tomcat

# 이미지 빌드와 컨테이너 실행 시 사용할 수 있는 환경 변수 (JAVA_HOME)
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# 볼륨 디렉터리 생성 (첨부 파일의 백업을 위함)
RUN mkdir -p /home/goodee/upload

# MySQL 데이터 디렉터리의 권한 조정 (MySQL 데이터의 백업을 위함)
RUN chown -R mysql:mysql /var/lib/mysql

# 이미지 빌드 시 실행할 명령어 (MySQL 설정)
RUN service mysql start && \
    mysql -e "CREATE DATABASE IF NOT EXISTS db_file;" && \
    mysql -e "CREATE USER 'goodee'@'localhost' IDENTIFIED BY 'goodee';" && \
    mysql -e "GRANT ALL PRIVILEGES ON db_file.* TO 'goodee'@'localhost';"  && \
    mysql -e "FLUSH PRIVILEGES;" && \
    service mysql stop

# 기본 작업 경로 설정 (github 소스코드 클론할 경로)
WORKDIR /tmp

# 이미지 빌드 시 실행할 명령어 (github 소스코드 클론)
RUN git clone https://github.com/teacher-min/DeployProject.git

# 기본 작업 경로 설정 (maven 빌드할 경로)
WORKDIR /tmp/DeployProject

# 이미지 빌드 시 실행할 명령어 (maven 빌드)
RUN mvn clean package

# 이미지 빌드 시 실행할 명령어 (빌드 결과 war 파일을 톰캣 9.0에 배포)
RUN cp /tmp/DeployProject/target/DeployProject-1.0.0.war /home/tomcat/apache-tomcat-9.0.109/webapps/deploy.war

# 볼륨 선언
# 자동으로 익명 볼륨(볼륨 이름이 UUID)이 생성되어 마운트되는 볼륨 마운트 방식으로 동작
# 볼륨 이름을 지정하고 싶으면 컨테이너 실행 시(docker run) "-v 볼륨명:경로" 방식으로 실행하면 됨
VOLUME ["/home/goodee/upload", "/var/lib/mysql"]

# 이미지 빌드 시 실행할 명령어 (nginx 리버스 프록시 설정)
# 동일한 컨테이너에서 모두 동작하므로 주소는 localhost로 설정
RUN cat > /etc/nginx/conf.d/tomcat-proxy.conf << 'EOF'
server {
  listen 80;
  server_name localhost;
  location /deploy {
    proxy_pass http://localhost:8080/deploy;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }
}
EOF

# nginx 기본 설정 제거 (/etc/nginx/conf.d/tomcat-proxy.conf 설정과 충돌이 발생하는 파일 제거)
RUN rm -f /etc/nginx/sites-enabled/default

# 포트 열기 (Nginx, 톰캣, MySQL 포트 열기)
EXPOSE 80 8080 3306

# 이미지 빌드 시 실행할 명령어 (시작 스크립트 파일 작성 : MySQL 시작 -> schema.sql 스크립트 실행 -> 톰캣 시작)
# cat 방식 연습
# 최초 컨테이너 실행 시 : schema.sql 실행함
# 이후 컨테이너 실행 시 : Schema already initialized (Skip) ... 로그만 남기고 schema.sql 실행안함 (도커 볼륨이 백업한 내용을 사용하기 위해서)
RUN cat > /home/start.sh << 'EOF'
#!/bin/bash
# 1. MySQL 시작
echo "1. Start MySQL Server ..."
service mysql start
# 2. MySQL 실행 대기 (경우에 따라 MySQL이 시작하기 전에 schema.sql을 실행하는 경우가 있음)
echo "2. Waiting MySQL Server to start ..."
while ! mysqladmin ping -h"localhost" --silent; do
  sleep 1
done
# 3. schema.sql 실행
if [ ! -f /var/lib/mysql/schema_initialized ]; then
  echo "3. Running schema.sql (First time) ..."
  mysql -u goodee -pgoodee db_file < /tmp/DeployProject/src/main/resources/schema.sql
  touch /var/lib/mysql/schema_initialized
else
  echo "3. Schema already initialized (Skip) ..."
fi
# 4. Tomcat 백그라운드 시작 (start를 이용해 백그라운드 실행, Nginx 통해 접속하기 위함)
echo "4. Start Tomcat Server (background) ..."
/home/tomcat/apache-tomcat-9.0.109/bin/catalina.sh start
# 5. Nginx 포어그라운드 시작
echo "Start Nginx server (foreground) ..."
nginx -g "daemon off;"
EOF

# 이미지 빌드 시 실행할 명령어 (/home/start.sh 파일에 모든 사용자에게 실행 권한 부여하기)
RUN chmod a+x /home/start.sh

# 컨테이너 실행 시 수행할 명령어
CMD ["/home/start.sh"]

### 실행방법
### 0. Dockerfile7 실행 이후인 경우 도커 볼륨 정리 필요 (도커 볼륨을 사용 중인 컨테이너를 먼저 정리)
###    goodee@server1:~/dockerfiles$ docker stop app-tomcat-server
###    goodee@server1:~/dockerfiles$ docker rm app-tomcat-server
###    goodee@server1:~/dockerfiles$ docker volume rm mysql-vol
###    goodee@server1:~/dockerfiles$ docker volume rm blog-vol
### 1. 이미지 빌드 (이미지 만들기)
###    goodee@server1:~/dockerfiles$ docker build -t myubuntu:8.0 -f Dockerfile8 .
### 2. 컨테이너 실행
###    goodee@server1:~/dockerfiles$ docker run -d --name app-nginx-server -p 8080:8080 -p 3306:3306 -v mysql-vol:/var/lib/mysql -v upload-vol:/home/goodee/upload myubuntu:8.0
### 3. 브라우저로 접속 확인
###    http://192.168.56.1/deploy 접속 시 DeployProject 애플리케이션 동작 확인 가능