# 베이스 이미지
FROM ubuntu:22.04

# 이미지 빌드 시 실행할 명령어 (패키지 설치)
RUN apt update && apt install -y openjdk-11-jdk wget git maven mysql-server

# 이미지 빌드 시 실행할 명령어 (톰캣 9.0 설치)
RUN wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.109/bin/apache-tomcat-9.0.109.tar.gz -P /home/tomcat
RUN tar -xzvf /home/tomcat/apache-tomcat-9.0.109.tar.gz -C /home/tomcat

# 이미지 빌드와 컨테이너 실행 시 사용할 수 있는 환경 변수 (JAVA_HOME)
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# 볼륨 디렉터리 생성 (첨부 파일의 백업을 위함)
RUN mkdir -p /home/goodee/upload

# MySQL 데이터 디렉터리의 권한 조정 (MySQL 데이터의 백업을 위함)
RUN chown -R mysql:mysql /var/lib/mysql

# 이미지 빌드 시 실행할 명령어 (MySQL 설정)
RUN service mysql start && \
    mysql -e "CREATE DATABASE IF NOT EXISTS db_file;" && \
    mysql -e "CREATE USER 'goodee'@'localhost' IDENTIFIED BY 'goodee';" && \
    mysql -e "GRANT ALL PRIVILEGES ON db_file.* TO 'goodee'@'localhost';"  && \
    mysql -e "FLUSH PRIVILEGES;" && \
    service mysql stop

# 기본 작업 경로 설정 (github 소스코드 클론할 경로)
WORKDIR /tmp

# 이미지 빌드 시 실행할 명령어 (github 소스코드 클론)
RUN git clone https://github.com/teacher-min/DeployProject.git

# 기본 작업 경로 설정 (maven 빌드할 경로)
WORKDIR /tmp/DeployProject

# 이미지 빌드 시 실행할 명령어 (maven 빌드)
RUN mvn clean package

# 이미지 빌드 시 실행할 명령어 (빌드 결과 war 파일을 톰캣 9.0에 배포)
RUN cp /tmp/DeployProject/target/DeployProject-1.0.0.war /home/tomcat/apache-tomcat-9.0.109/webapps/deploy.war

# 볼륨 선언
# 자동으로 익명 볼륨(볼륨 이름이 UUID)이 생성되어 마운트되는 볼륨 마운트 방식으로 동작
# 볼륨 이름을 지정하고 싶으면 컨테이너 실행 시(docker run) "-v 볼륨명:경로" 방식으로 실행하면 됨
VOLUME ["/home/goodee/upload", "/var/lib/mysql"]

# 포트 열기 (톰캣, MySQL 포트 열기)
EXPOSE 8080 3306

# 이미지 빌드 시 실행할 명령어 (시작 스크립트 파일 작성 : MySQL 시작 -> schema.sql 스크립트 실행 -> 톰캣 시작)
# echo 방식 연습
# 최초 컨테이너 실행 시 : schema.sql 실행함
# 이후 컨테이너 실행 시 : Schema already initialized (Skip) ... 로그만 남기고 schema.sql 실행안함 (도커 볼륨이 백업한 내용을 사용하기 위해서)
RUN echo '#!/bin/bash' > /home/start.sh && \
    echo '# 1. MySQL 시작' >> /home/start.sh && \
    echo 'echo "1. Start MySQL Server ..."' >> /home/start.sh && \
    echo 'service mysql start' >> /home/start.sh && \
    echo '# 2. MySQL 실행 대기 (경우에 따라 MySQL이 시작하기 전에 schema.sql을 실행하는 경우가 있음)' >> /home/start.sh && \
    echo 'echo "2. Waiting MySQL Server to start ..."' >> /home/start.sh && \
    echo 'while ! mysqladmin ping -h"localhost" --silent; do' >> /home/start.sh && \
    echo '  sleep 1' >> /home/start.sh && \
    echo 'done' >> /home/start.sh && \
    echo 'if [ ! -f /var/lib/mysql/schema_initialized ]; then' >> /home/start.sh && \
    echo '# 3. schema.sql 실행' >> /home/start.sh && \
    echo '  echo "3. Running schema.sql (First time) ..."' >> /home/start.sh && \
    echo '  mysql -u goodee -pgoodee db_file < /tmp/DeployProject/src/main/resources/schema.sql' >> /home/start.sh && \
    echo '  touch /var/lib/mysql/schema_initialized' >> /home/start.sh && \
    echo 'else' >> /home/start.sh && \
    echo '  echo "3. Schema already initialized (Skip) ..."' >> /home/start.sh && \
    echo 'fi' >> /home/start.sh && \
    echo '# 4. Tomcat 백그라운드 시작 (run을 이용해 포어그라운드 실행, Tomcat 통해 접속하기 위함)' >> /home/start.sh && \
    echo 'echo "4. Start Tomcat Server (foreground) ..."' >> /home/start.sh && \
    echo '/home/tomcat/apache-tomcat-9.0.109/bin/catalina.sh run' >> /home/start.sh

# 이미지 빌드 시 실행할 명령어 (/home/start.sh 파일에 모든 사용자에게 실행 권한 부여하기)
RUN chmod a+x /home/start.sh

# 컨테이너 실행 시 수행할 명령어
CMD ["/home/start.sh"]

### 실행방법
### 1. 이미지 빌드 (이미지 만들기)
###    goodee@server1:~/dockerfiles$ docker build -t myubuntu:7.0 -f Dockerfile7 .
### 2. 컨테이너 실행
###    포트 연결 시 8080, 3306 모두 사용중이면 실패하므로 사용 여부 확인 필요
###    goodee@server1:~/dockerfiles$ sudo lsof -i:3306
###    [sudo] password for goodee:
###    COMMAND PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
###    mysqld  781 mysql   23u  IPv4  22334      0t0  TCP localhost:mysql (LISTEN)
###    goodee@server1:~/dockerfiles$ sudo kill 781
###    goodee@server1:~/dockerfiles$ docker run -d --name app-tomcat-server -p 8080:8080 -p 3306:3306 -v mysql-vol:/var/lib/mysql -v upload-vol:/home/goodee/upload myubuntu:7.0
### 3. 브라우저로 접속 확인
###    http://192.168.56.1:8080/deploy 접속 시 DeployProject 애플리케이션 동작 확인 가능
###    회원 가입, 게시글 작성 등을 통해 데이터베이스와 첨부 파일 등록
### 4. 추가 작업으로 도커 볼륨 동작 여부 확인 (중지, 삭제 후 재시작)
###    goodee@server1:~/dockerfiles$ docker stop app-tomcat-server
###    goodee@server1:~/dockerfiles$ docker rm app-tomcat-server
###    goodee@server1:~/dockerfiles$ docker run -d --name app-tomcat-server -p 8080:8080 -p 3306:3306 -v mysql-vol:/var/lib/mysql -v upload-vol:/home/goodee/upload myubuntu:7.0
### 5. 브라우저로 접속 확인
###    http://192.168.56.1:8080/deploy 접속 시 기존 데이터가 남아 있다면 성공