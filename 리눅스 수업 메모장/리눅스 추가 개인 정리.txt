#
클라이언트 -----(x)----- > 서버(ip)
  |
  ----->nginx(ws) ------ > tomcat(8080, was), mysql(3306)
     리버스 프록시 서버
ws - 자바 코드 해석 불가(정적)
was - 자바 코드 해석 가능(동적)

#
3계층 구조(Three-Tier Architecture)
실무에서 가장 대표적인 서버 구조가 3계층입니다
웹 서버 / 애플리케이션 서버 / DB 서버가 각각 독립된 역할을 하고, 서로 협력하는 구조

웹 서버 (Web Server)
예: Nginx, Apache
역할: 클라이언트(브라우저)의 HTTP 요청을 가장 먼저 받음
정적 파일(HTML, CSS, JS, 이미지) 바로 응답
동적 요청은 뒤의 “애플리케이션 서버”로 전달(리버스 프록시 역할)
애플리케이션 서버 (Application Server)
예: Tomcat, Spring Boot 내장 서버, Node.js
역할: 실제 비즈니스 로직 처리
예: 로그인 확인, 게시글 등록/조회, 메시지 전송 등
DB에 접근해야 할 때는 DB 서버에게 요청
데이터베이스 서버 (DB Server)
예: MySQL, Oracle, PostgreSQL
역할: 데이터 저장 & 조회
단독으로 클라이언트의 요청을 받지는 않고, App 서버의 요청만 처리
파일 서버, 메일 서버, DNS 서버 등도 존재

계층 간 관계
웹 서버 ↔ 애플리케이션 서버 ↔ DB 서버는 부모-자식이라기보다는
“앞단 → 뒷단”으로 요청을 넘기는 파이프라인 관계
👉 흐름 예시:
사용자(브라우저)
   ↓ (HTTP 요청)
Nginx (웹 서버)
   ↓ (동적 요청 전달)
Tomcat (애플리케이션 서버, Spring 실행)
   ↓ (SQL 실행)
MySQL (DB 서버)

웹 서버 → 애플리케이션 서버 → DB 서버
→ 순서대로 요청이 전달되고 응답이 올라옴.
한 대 서버에서 같이 돌려도 계층 구조는 그대로 유지됨.

#
서버 = 네트워크에서 요청을 받아 응답하는 컴퓨터/프로그램
서버 공유 = CPU/메모리/디스크 같은 자원과 IP/포트를 여러 서비스·사용자가 함께 쓰는 것
꼭 IP만 공유한다는 뜻은 아님 → IP는 공유되는 자원 중 하나일 뿐

#
SSH는 내 PC에서 멀리 있는 서버의 터미널을 그대로 불러와서, 마치 로컬에서 작업하듯 안전하게 조종하고 파일까지 주고받을 수 있게 해주는 기술


